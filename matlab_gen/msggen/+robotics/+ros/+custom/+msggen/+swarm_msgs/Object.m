classdef Object < robotics.ros.Message
    %Object MATLAB implementation of swarm_msgs/Object
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'swarm_msgs/Object' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '3ed66682f6f0cc1e80e837ef8fa8bd5e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoint32Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point32') % Dispatch to MATLAB class for message type geometry_msgs/Point32
        StdMsgsUInt32Class = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/UInt32') % Dispatch to MATLAB class for message type std_msgs/UInt32
        SwarmMsgsBBox2dClass = robotics.ros.msg.internal.MessageFactory.getClassForType('swarm_msgs/BBox2d') % Dispatch to MATLAB class for message type swarm_msgs/BBox2d
        SwarmMsgsBBox3dClass = robotics.ros.msg.internal.MessageFactory.getClassForType('swarm_msgs/BBox3d') % Dispatch to MATLAB class for message type swarm_msgs/BBox3d
    end
    
    properties (Dependent)
        Id
        Type
        Bbox2d
        Bbox3d
        Direction
    end
    
    properties (Access = protected)
        Cache = struct('Id', [], 'Type', [], 'Bbox2d', [], 'Bbox3d', [], 'Direction', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Bbox2d', 'Bbox3d', 'Direction', 'Id', 'Type'} % List of non-constant message properties
        ROSPropertyList = {'bbox2d', 'bbox3d', 'direction', 'id', 'type'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Object(msg)
            %Object Construct the message object Object
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            if isempty(obj.Cache.Id)
                obj.Cache.Id = feval(obj.StdMsgsUInt32Class, obj.JavaMessage.getId);
            end
            id = obj.Cache.Id;
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {obj.StdMsgsUInt32Class}, {'nonempty', 'scalar'}, 'Object', 'Id');
            
            obj.JavaMessage.setId(id.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Id)
                obj.Cache.Id.setJavaObject(id.getJavaObject);
            end
        end
        
        function type = get.Type(obj)
            %get.Type Get the value for property Type
            if isempty(obj.Cache.Type)
                obj.Cache.Type = feval(obj.StdMsgsUInt32Class, obj.JavaMessage.getType);
            end
            type = obj.Cache.Type;
        end
        
        function set.Type(obj, type)
            %set.Type Set the value for property Type
            validateattributes(type, {obj.StdMsgsUInt32Class}, {'nonempty', 'scalar'}, 'Object', 'Type');
            
            obj.JavaMessage.setType(type.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Type)
                obj.Cache.Type.setJavaObject(type.getJavaObject);
            end
        end
        
        function bbox2d = get.Bbox2d(obj)
            %get.Bbox2d Get the value for property Bbox2d
            if isempty(obj.Cache.Bbox2d)
                obj.Cache.Bbox2d = feval(obj.SwarmMsgsBBox2dClass, obj.JavaMessage.getBbox2d);
            end
            bbox2d = obj.Cache.Bbox2d;
        end
        
        function set.Bbox2d(obj, bbox2d)
            %set.Bbox2d Set the value for property Bbox2d
            validateattributes(bbox2d, {obj.SwarmMsgsBBox2dClass}, {'nonempty', 'scalar'}, 'Object', 'Bbox2d');
            
            obj.JavaMessage.setBbox2d(bbox2d.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Bbox2d)
                obj.Cache.Bbox2d.setJavaObject(bbox2d.getJavaObject);
            end
        end
        
        function bbox3d = get.Bbox3d(obj)
            %get.Bbox3d Get the value for property Bbox3d
            if isempty(obj.Cache.Bbox3d)
                obj.Cache.Bbox3d = feval(obj.SwarmMsgsBBox3dClass, obj.JavaMessage.getBbox3d);
            end
            bbox3d = obj.Cache.Bbox3d;
        end
        
        function set.Bbox3d(obj, bbox3d)
            %set.Bbox3d Set the value for property Bbox3d
            validateattributes(bbox3d, {obj.SwarmMsgsBBox3dClass}, {'nonempty', 'scalar'}, 'Object', 'Bbox3d');
            
            obj.JavaMessage.setBbox3d(bbox3d.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Bbox3d)
                obj.Cache.Bbox3d.setJavaObject(bbox3d.getJavaObject);
            end
        end
        
        function direction = get.Direction(obj)
            %get.Direction Get the value for property Direction
            if isempty(obj.Cache.Direction)
                obj.Cache.Direction = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getDirection);
            end
            direction = obj.Cache.Direction;
        end
        
        function set.Direction(obj, direction)
            %set.Direction Set the value for property Direction
            validateattributes(direction, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'Object', 'Direction');
            
            obj.JavaMessage.setDirection(direction.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Direction)
                obj.Cache.Direction.setJavaObject(direction.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Id = [];
            obj.Cache.Type = [];
            obj.Cache.Bbox2d = [];
            obj.Cache.Bbox3d = [];
            obj.Cache.Direction = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Id = copy(obj.Id);
            cpObj.Type = copy(obj.Type);
            cpObj.Bbox2d = copy(obj.Bbox2d);
            cpObj.Bbox3d = copy(obj.Bbox3d);
            cpObj.Direction = copy(obj.Direction);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = feval([obj.StdMsgsUInt32Class '.loadobj'], strObj.Id);
            obj.Type = feval([obj.StdMsgsUInt32Class '.loadobj'], strObj.Type);
            obj.Bbox2d = feval([obj.SwarmMsgsBBox2dClass '.loadobj'], strObj.Bbox2d);
            obj.Bbox3d = feval([obj.SwarmMsgsBBox3dClass '.loadobj'], strObj.Bbox3d);
            obj.Direction = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.Direction);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = saveobj(obj.Id);
            strObj.Type = saveobj(obj.Type);
            strObj.Bbox2d = saveobj(obj.Bbox2d);
            strObj.Bbox3d = saveobj(obj.Bbox3d);
            strObj.Direction = saveobj(obj.Direction);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.swarm_msgs.Object.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.swarm_msgs.Object;
            obj.reload(strObj);
        end
    end
end
