classdef Pipeunit < robotics.ros.Message
    %Pipeunit MATLAB implementation of swarm_msgs/Pipeunit
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'swarm_msgs/Pipeunit' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'd022dc15d2e5ff7cec5d6a69102a331c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoint32Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point32') % Dispatch to MATLAB class for message type geometry_msgs/Point32
    end
    
    properties (Dependent)
        Middle
        Left
        Right
        Bottom
        Up
    end
    
    properties (Access = protected)
        Cache = struct('Middle', [], 'Left', [], 'Right', [], 'Bottom', [], 'Up', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Bottom', 'Left', 'Middle', 'Right', 'Up'} % List of non-constant message properties
        ROSPropertyList = {'bottom', 'left', 'middle', 'right', 'up'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Pipeunit(msg)
            %Pipeunit Construct the message object Pipeunit
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function middle = get.Middle(obj)
            %get.Middle Get the value for property Middle
            if isempty(obj.Cache.Middle)
                obj.Cache.Middle = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getMiddle);
            end
            middle = obj.Cache.Middle;
        end
        
        function set.Middle(obj, middle)
            %set.Middle Set the value for property Middle
            validateattributes(middle, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'Pipeunit', 'Middle');
            
            obj.JavaMessage.setMiddle(middle.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Middle)
                obj.Cache.Middle.setJavaObject(middle.getJavaObject);
            end
        end
        
        function left = get.Left(obj)
            %get.Left Get the value for property Left
            if isempty(obj.Cache.Left)
                obj.Cache.Left = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getLeft);
            end
            left = obj.Cache.Left;
        end
        
        function set.Left(obj, left)
            %set.Left Set the value for property Left
            validateattributes(left, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'Pipeunit', 'Left');
            
            obj.JavaMessage.setLeft(left.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Left)
                obj.Cache.Left.setJavaObject(left.getJavaObject);
            end
        end
        
        function right = get.Right(obj)
            %get.Right Get the value for property Right
            if isempty(obj.Cache.Right)
                obj.Cache.Right = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getRight);
            end
            right = obj.Cache.Right;
        end
        
        function set.Right(obj, right)
            %set.Right Set the value for property Right
            validateattributes(right, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'Pipeunit', 'Right');
            
            obj.JavaMessage.setRight(right.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Right)
                obj.Cache.Right.setJavaObject(right.getJavaObject);
            end
        end
        
        function bottom = get.Bottom(obj)
            %get.Bottom Get the value for property Bottom
            if isempty(obj.Cache.Bottom)
                obj.Cache.Bottom = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getBottom);
            end
            bottom = obj.Cache.Bottom;
        end
        
        function set.Bottom(obj, bottom)
            %set.Bottom Set the value for property Bottom
            validateattributes(bottom, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'Pipeunit', 'Bottom');
            
            obj.JavaMessage.setBottom(bottom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Bottom)
                obj.Cache.Bottom.setJavaObject(bottom.getJavaObject);
            end
        end
        
        function up = get.Up(obj)
            %get.Up Get the value for property Up
            if isempty(obj.Cache.Up)
                obj.Cache.Up = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getUp);
            end
            up = obj.Cache.Up;
        end
        
        function set.Up(obj, up)
            %set.Up Set the value for property Up
            validateattributes(up, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'Pipeunit', 'Up');
            
            obj.JavaMessage.setUp(up.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Up)
                obj.Cache.Up.setJavaObject(up.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Middle = [];
            obj.Cache.Left = [];
            obj.Cache.Right = [];
            obj.Cache.Bottom = [];
            obj.Cache.Up = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Middle = copy(obj.Middle);
            cpObj.Left = copy(obj.Left);
            cpObj.Right = copy(obj.Right);
            cpObj.Bottom = copy(obj.Bottom);
            cpObj.Up = copy(obj.Up);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Middle = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.Middle);
            obj.Left = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.Left);
            obj.Right = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.Right);
            obj.Bottom = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.Bottom);
            obj.Up = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.Up);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Middle = saveobj(obj.Middle);
            strObj.Left = saveobj(obj.Left);
            strObj.Right = saveobj(obj.Right);
            strObj.Bottom = saveobj(obj.Bottom);
            strObj.Up = saveobj(obj.Up);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.swarm_msgs.Pipeunit.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.swarm_msgs.Pipeunit;
            obj.reload(strObj);
        end
    end
end
