classdef BBox3d < robotics.ros.Message
    %BBox3d MATLAB implementation of swarm_msgs/BBox3d
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'swarm_msgs/BBox3d' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4b6237b109b145b03439e44d8038fa4e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoint32Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point32') % Dispatch to MATLAB class for message type geometry_msgs/Point32
    end
    
    properties (Dependent)
        LeftFrontBottom
        RightBackTop
    end
    
    properties (Access = protected)
        Cache = struct('LeftFrontBottom', [], 'RightBackTop', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'LeftFrontBottom', 'RightBackTop'} % List of non-constant message properties
        ROSPropertyList = {'left_front_bottom', 'right_back_top'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = BBox3d(msg)
            %BBox3d Construct the message object BBox3d
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function leftfrontbottom = get.LeftFrontBottom(obj)
            %get.LeftFrontBottom Get the value for property LeftFrontBottom
            if isempty(obj.Cache.LeftFrontBottom)
                obj.Cache.LeftFrontBottom = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getLeftFrontBottom);
            end
            leftfrontbottom = obj.Cache.LeftFrontBottom;
        end
        
        function set.LeftFrontBottom(obj, leftfrontbottom)
            %set.LeftFrontBottom Set the value for property LeftFrontBottom
            validateattributes(leftfrontbottom, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'BBox3d', 'LeftFrontBottom');
            
            obj.JavaMessage.setLeftFrontBottom(leftfrontbottom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LeftFrontBottom)
                obj.Cache.LeftFrontBottom.setJavaObject(leftfrontbottom.getJavaObject);
            end
        end
        
        function rightbacktop = get.RightBackTop(obj)
            %get.RightBackTop Get the value for property RightBackTop
            if isempty(obj.Cache.RightBackTop)
                obj.Cache.RightBackTop = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getRightBackTop);
            end
            rightbacktop = obj.Cache.RightBackTop;
        end
        
        function set.RightBackTop(obj, rightbacktop)
            %set.RightBackTop Set the value for property RightBackTop
            validateattributes(rightbacktop, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'BBox3d', 'RightBackTop');
            
            obj.JavaMessage.setRightBackTop(rightbacktop.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RightBackTop)
                obj.Cache.RightBackTop.setJavaObject(rightbacktop.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.LeftFrontBottom = [];
            obj.Cache.RightBackTop = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.LeftFrontBottom = copy(obj.LeftFrontBottom);
            cpObj.RightBackTop = copy(obj.RightBackTop);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LeftFrontBottom = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.LeftFrontBottom);
            obj.RightBackTop = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.RightBackTop);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LeftFrontBottom = saveobj(obj.LeftFrontBottom);
            strObj.RightBackTop = saveobj(obj.RightBackTop);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.swarm_msgs.BBox3d.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.swarm_msgs.BBox3d;
            obj.reload(strObj);
        end
    end
end
